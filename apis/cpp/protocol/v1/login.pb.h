// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
namespace protocol {
namespace login {
namespace v1 {
class AdminReq;
class AdminReqDefaultTypeInternal;
extern AdminReqDefaultTypeInternal _AdminReq_default_instance_;
class AdminResp;
class AdminRespDefaultTypeInternal;
extern AdminRespDefaultTypeInternal _AdminResp_default_instance_;
class BasicInfoItem;
class BasicInfoItemDefaultTypeInternal;
extern BasicInfoItemDefaultTypeInternal _BasicInfoItem_default_instance_;
class CommonHeaderReq;
class CommonHeaderReqDefaultTypeInternal;
extern CommonHeaderReqDefaultTypeInternal _CommonHeaderReq_default_instance_;
class CommonHeaderResp;
class CommonHeaderRespDefaultTypeInternal;
extern CommonHeaderRespDefaultTypeInternal _CommonHeaderResp_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginResp;
class LoginRespDefaultTypeInternal;
extern LoginRespDefaultTypeInternal _LoginResp_default_instance_;
class LoginResp_MessageItem;
class LoginResp_MessageItemDefaultTypeInternal;
extern LoginResp_MessageItemDefaultTypeInternal _LoginResp_MessageItem_default_instance_;
class LogoutReq;
class LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutResp;
class LogoutRespDefaultTypeInternal;
extern LogoutRespDefaultTypeInternal _LogoutResp_default_instance_;
class RegisterReq;
class RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
class RegisterResp;
class RegisterRespDefaultTypeInternal;
extern RegisterRespDefaultTypeInternal _RegisterResp_default_instance_;
class UpdateBasicInfoReq;
class UpdateBasicInfoReqDefaultTypeInternal;
extern UpdateBasicInfoReqDefaultTypeInternal _UpdateBasicInfoReq_default_instance_;
class UpdateBasicInfoResp;
class UpdateBasicInfoRespDefaultTypeInternal;
extern UpdateBasicInfoRespDefaultTypeInternal _UpdateBasicInfoResp_default_instance_;
}  // namespace v1
}  // namespace login
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::login::v1::AdminReq* Arena::CreateMaybeMessage<::protocol::login::v1::AdminReq>(Arena*);
template<> ::protocol::login::v1::AdminResp* Arena::CreateMaybeMessage<::protocol::login::v1::AdminResp>(Arena*);
template<> ::protocol::login::v1::BasicInfoItem* Arena::CreateMaybeMessage<::protocol::login::v1::BasicInfoItem>(Arena*);
template<> ::protocol::login::v1::CommonHeaderReq* Arena::CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(Arena*);
template<> ::protocol::login::v1::CommonHeaderResp* Arena::CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(Arena*);
template<> ::protocol::login::v1::DeviceInfo* Arena::CreateMaybeMessage<::protocol::login::v1::DeviceInfo>(Arena*);
template<> ::protocol::login::v1::LoginReq* Arena::CreateMaybeMessage<::protocol::login::v1::LoginReq>(Arena*);
template<> ::protocol::login::v1::LoginResp* Arena::CreateMaybeMessage<::protocol::login::v1::LoginResp>(Arena*);
template<> ::protocol::login::v1::LoginResp_MessageItem* Arena::CreateMaybeMessage<::protocol::login::v1::LoginResp_MessageItem>(Arena*);
template<> ::protocol::login::v1::LogoutReq* Arena::CreateMaybeMessage<::protocol::login::v1::LogoutReq>(Arena*);
template<> ::protocol::login::v1::LogoutResp* Arena::CreateMaybeMessage<::protocol::login::v1::LogoutResp>(Arena*);
template<> ::protocol::login::v1::RegisterReq* Arena::CreateMaybeMessage<::protocol::login::v1::RegisterReq>(Arena*);
template<> ::protocol::login::v1::RegisterResp* Arena::CreateMaybeMessage<::protocol::login::v1::RegisterResp>(Arena*);
template<> ::protocol::login::v1::UpdateBasicInfoReq* Arena::CreateMaybeMessage<::protocol::login::v1::UpdateBasicInfoReq>(Arena*);
template<> ::protocol::login::v1::UpdateBasicInfoResp* Arena::CreateMaybeMessage<::protocol::login::v1::UpdateBasicInfoResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace login {
namespace v1 {

// ===================================================================

class CommonHeaderReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.CommonHeaderReq) */ {
 public:
  CommonHeaderReq();
  virtual ~CommonHeaderReq();

  CommonHeaderReq(const CommonHeaderReq& from);
  CommonHeaderReq(CommonHeaderReq&& from) noexcept
    : CommonHeaderReq() {
    *this = ::std::move(from);
  }

  inline CommonHeaderReq& operator=(const CommonHeaderReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonHeaderReq& operator=(CommonHeaderReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonHeaderReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonHeaderReq* internal_default_instance() {
    return reinterpret_cast<const CommonHeaderReq*>(
               &_CommonHeaderReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonHeaderReq& a, CommonHeaderReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonHeaderReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonHeaderReq* New() const final {
    return CreateMaybeMessage<CommonHeaderReq>(nullptr);
  }

  CommonHeaderReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonHeaderReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonHeaderReq& from);
  void MergeFrom(const CommonHeaderReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonHeaderReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.CommonHeaderReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kTokenFieldNumber = 2,
    kStampFieldNumber = 3,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 stamp = 3;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.CommonHeaderReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CommonHeaderResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.CommonHeaderResp) */ {
 public:
  CommonHeaderResp();
  virtual ~CommonHeaderResp();

  CommonHeaderResp(const CommonHeaderResp& from);
  CommonHeaderResp(CommonHeaderResp&& from) noexcept
    : CommonHeaderResp() {
    *this = ::std::move(from);
  }

  inline CommonHeaderResp& operator=(const CommonHeaderResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonHeaderResp& operator=(CommonHeaderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonHeaderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonHeaderResp* internal_default_instance() {
    return reinterpret_cast<const CommonHeaderResp*>(
               &_CommonHeaderResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonHeaderResp& a, CommonHeaderResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonHeaderResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonHeaderResp* New() const final {
    return CreateMaybeMessage<CommonHeaderResp>(nullptr);
  }

  CommonHeaderResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonHeaderResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonHeaderResp& from);
  void MergeFrom(const CommonHeaderResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonHeaderResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.CommonHeaderResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.CommonHeaderResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.DeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 4,
    kDeviceIdFieldNumber = 5,
    kSystemTypeFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kChannelTypeFieldNumber = 3,
  };
  // string device_name = 4;
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string device_id = 5;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // uint32 system_type = 1;
  void clear_system_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 system_type() const;
  void set_system_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_system_type() const;
  void _internal_set_system_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 device_type = 2;
  void clear_device_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_type() const;
  void set_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_type() const;
  void _internal_set_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel_type = 3;
  void clear_channel_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_type() const;
  void set_channel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_type() const;
  void _internal_set_channel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.DeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 system_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RegisterReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.RegisterReq) */ {
 public:
  RegisterReq();
  virtual ~RegisterReq();

  RegisterReq(const RegisterReq& from);
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterReq* New() const final {
    return CreateMaybeMessage<RegisterReq>(nullptr);
  }

  RegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterReq& from);
  void MergeFrom(const RegisterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.RegisterReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 2,
    kSignFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kDeviceInfoFieldNumber = 3,
  };
  // string phone_number = 2;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string sign = 4;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // .protocol.login.v1.CommonHeaderReq header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderReq& header() const;
  ::protocol::login::v1::CommonHeaderReq* release_header();
  ::protocol::login::v1::CommonHeaderReq* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderReq* header);
  private:
  const ::protocol::login::v1::CommonHeaderReq& _internal_header() const;
  ::protocol::login::v1::CommonHeaderReq* _internal_mutable_header();
  public:

  // .protocol.login.v1.DeviceInfo device_info = 3;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::protocol::login::v1::DeviceInfo& device_info() const;
  ::protocol::login::v1::DeviceInfo* release_device_info();
  ::protocol::login::v1::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::protocol::login::v1::DeviceInfo* device_info);
  private:
  const ::protocol::login::v1::DeviceInfo& _internal_device_info() const;
  ::protocol::login::v1::DeviceInfo* _internal_mutable_device_info();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.RegisterReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::protocol::login::v1::CommonHeaderReq* header_;
  ::protocol::login::v1::DeviceInfo* device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RegisterResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.RegisterResp) */ {
 public:
  RegisterResp();
  virtual ~RegisterResp();

  RegisterResp(const RegisterResp& from);
  RegisterResp(RegisterResp&& from) noexcept
    : RegisterResp() {
    *this = ::std::move(from);
  }

  inline RegisterResp& operator=(const RegisterResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResp& operator=(RegisterResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResp* internal_default_instance() {
    return reinterpret_cast<const RegisterResp*>(
               &_RegisterResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterResp& a, RegisterResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResp* New() const final {
    return CreateMaybeMessage<RegisterResp>(nullptr);
  }

  RegisterResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResp& from);
  void MergeFrom(const RegisterResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.RegisterResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .protocol.login.v1.CommonHeaderResp header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderResp& header() const;
  ::protocol::login::v1::CommonHeaderResp* release_header();
  ::protocol::login::v1::CommonHeaderResp* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderResp* header);
  private:
  const ::protocol::login::v1::CommonHeaderResp& _internal_header() const;
  ::protocol::login::v1::CommonHeaderResp* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.RegisterResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::login::v1::CommonHeaderResp* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kDeviceInfoFieldNumber = 3,
    kLoginTypeFieldNumber = 2,
  };
  // string sign = 4;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // .protocol.login.v1.CommonHeaderReq header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderReq& header() const;
  ::protocol::login::v1::CommonHeaderReq* release_header();
  ::protocol::login::v1::CommonHeaderReq* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderReq* header);
  private:
  const ::protocol::login::v1::CommonHeaderReq& _internal_header() const;
  ::protocol::login::v1::CommonHeaderReq* _internal_mutable_header();
  public:

  // .protocol.login.v1.DeviceInfo device_info = 3;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::protocol::login::v1::DeviceInfo& device_info() const;
  ::protocol::login::v1::DeviceInfo* release_device_info();
  ::protocol::login::v1::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::protocol::login::v1::DeviceInfo* device_info);
  private:
  const ::protocol::login::v1::DeviceInfo& _internal_device_info() const;
  ::protocol::login::v1::DeviceInfo* _internal_mutable_device_info();
  public:

  // uint32 login_type = 2;
  void clear_login_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_type() const;
  void set_login_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_type() const;
  void _internal_set_login_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::protocol::login::v1::CommonHeaderReq* header_;
  ::protocol::login::v1::DeviceInfo* device_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginResp_MessageItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.LoginResp.MessageItem) */ {
 public:
  LoginResp_MessageItem();
  virtual ~LoginResp_MessageItem();

  LoginResp_MessageItem(const LoginResp_MessageItem& from);
  LoginResp_MessageItem(LoginResp_MessageItem&& from) noexcept
    : LoginResp_MessageItem() {
    *this = ::std::move(from);
  }

  inline LoginResp_MessageItem& operator=(const LoginResp_MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResp_MessageItem& operator=(LoginResp_MessageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResp_MessageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResp_MessageItem* internal_default_instance() {
    return reinterpret_cast<const LoginResp_MessageItem*>(
               &_LoginResp_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginResp_MessageItem& a, LoginResp_MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResp_MessageItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResp_MessageItem* New() const final {
    return CreateMaybeMessage<LoginResp_MessageItem>(nullptr);
  }

  LoginResp_MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResp_MessageItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResp_MessageItem& from);
  void MergeFrom(const LoginResp_MessageItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResp_MessageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.LoginResp.MessageItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint32 msg_type = 1;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.LoginResp.MessageItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.LoginResp) */ {
 public:
  LoginResp();
  virtual ~LoginResp();

  LoginResp(const LoginResp& from);
  LoginResp(LoginResp&& from) noexcept
    : LoginResp() {
    *this = ::std::move(from);
  }

  inline LoginResp& operator=(const LoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResp& operator=(LoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResp* internal_default_instance() {
    return reinterpret_cast<const LoginResp*>(
               &_LoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoginResp& a, LoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResp* New() const final {
    return CreateMaybeMessage<LoginResp>(nullptr);
  }

  LoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResp& from);
  void MergeFrom(const LoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.LoginResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginResp_MessageItem MessageItem;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .protocol.login.v1.LoginResp.MessageItem messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::protocol::login::v1::LoginResp_MessageItem* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::login::v1::LoginResp_MessageItem >*
      mutable_messages();
  private:
  const ::protocol::login::v1::LoginResp_MessageItem& _internal_messages(int index) const;
  ::protocol::login::v1::LoginResp_MessageItem* _internal_add_messages();
  public:
  const ::protocol::login::v1::LoginResp_MessageItem& messages(int index) const;
  ::protocol::login::v1::LoginResp_MessageItem* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::login::v1::LoginResp_MessageItem >&
      messages() const;

  // .protocol.login.v1.CommonHeaderResp header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderResp& header() const;
  ::protocol::login::v1::CommonHeaderResp* release_header();
  ::protocol::login::v1::CommonHeaderResp* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderResp* header);
  private:
  const ::protocol::login::v1::CommonHeaderResp& _internal_header() const;
  ::protocol::login::v1::CommonHeaderResp* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.LoginResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::login::v1::LoginResp_MessageItem > messages_;
  ::protocol::login::v1::CommonHeaderResp* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class BasicInfoItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.BasicInfoItem) */ {
 public:
  BasicInfoItem();
  virtual ~BasicInfoItem();

  BasicInfoItem(const BasicInfoItem& from);
  BasicInfoItem(BasicInfoItem&& from) noexcept
    : BasicInfoItem() {
    *this = ::std::move(from);
  }

  inline BasicInfoItem& operator=(const BasicInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicInfoItem& operator=(BasicInfoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicInfoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicInfoItem* internal_default_instance() {
    return reinterpret_cast<const BasicInfoItem*>(
               &_BasicInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BasicInfoItem& a, BasicInfoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicInfoItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicInfoItem* New() const final {
    return CreateMaybeMessage<BasicInfoItem>(nullptr);
  }

  BasicInfoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicInfoItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicInfoItem& from);
  void MergeFrom(const BasicInfoItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicInfoItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.BasicInfoItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserNickFieldNumber = 2,
    kAvatarFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kGenderFieldNumber = 3,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_nick = 2;
  void clear_user_nick();
  const std::string& user_nick() const;
  void set_user_nick(const std::string& value);
  void set_user_nick(std::string&& value);
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  std::string* mutable_user_nick();
  std::string* release_user_nick();
  void set_allocated_user_nick(std::string* user_nick);
  private:
  const std::string& _internal_user_nick() const;
  void _internal_set_user_nick(const std::string& value);
  std::string* _internal_mutable_user_nick();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 gender = 3;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::uint32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.BasicInfoItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class UpdateBasicInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.UpdateBasicInfoReq) */ {
 public:
  UpdateBasicInfoReq();
  virtual ~UpdateBasicInfoReq();

  UpdateBasicInfoReq(const UpdateBasicInfoReq& from);
  UpdateBasicInfoReq(UpdateBasicInfoReq&& from) noexcept
    : UpdateBasicInfoReq() {
    *this = ::std::move(from);
  }

  inline UpdateBasicInfoReq& operator=(const UpdateBasicInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBasicInfoReq& operator=(UpdateBasicInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBasicInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBasicInfoReq* internal_default_instance() {
    return reinterpret_cast<const UpdateBasicInfoReq*>(
               &_UpdateBasicInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateBasicInfoReq& a, UpdateBasicInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBasicInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBasicInfoReq* New() const final {
    return CreateMaybeMessage<UpdateBasicInfoReq>(nullptr);
  }

  UpdateBasicInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBasicInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBasicInfoReq& from);
  void MergeFrom(const UpdateBasicInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBasicInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.UpdateBasicInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .protocol.login.v1.CommonHeaderReq header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderReq& header() const;
  ::protocol::login::v1::CommonHeaderReq* release_header();
  ::protocol::login::v1::CommonHeaderReq* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderReq* header);
  private:
  const ::protocol::login::v1::CommonHeaderReq& _internal_header() const;
  ::protocol::login::v1::CommonHeaderReq* _internal_mutable_header();
  public:

  // .protocol.login.v1.BasicInfoItem info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::protocol::login::v1::BasicInfoItem& info() const;
  ::protocol::login::v1::BasicInfoItem* release_info();
  ::protocol::login::v1::BasicInfoItem* mutable_info();
  void set_allocated_info(::protocol::login::v1::BasicInfoItem* info);
  private:
  const ::protocol::login::v1::BasicInfoItem& _internal_info() const;
  ::protocol::login::v1::BasicInfoItem* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.UpdateBasicInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::login::v1::CommonHeaderReq* header_;
  ::protocol::login::v1::BasicInfoItem* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class UpdateBasicInfoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.UpdateBasicInfoResp) */ {
 public:
  UpdateBasicInfoResp();
  virtual ~UpdateBasicInfoResp();

  UpdateBasicInfoResp(const UpdateBasicInfoResp& from);
  UpdateBasicInfoResp(UpdateBasicInfoResp&& from) noexcept
    : UpdateBasicInfoResp() {
    *this = ::std::move(from);
  }

  inline UpdateBasicInfoResp& operator=(const UpdateBasicInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBasicInfoResp& operator=(UpdateBasicInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBasicInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBasicInfoResp* internal_default_instance() {
    return reinterpret_cast<const UpdateBasicInfoResp*>(
               &_UpdateBasicInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateBasicInfoResp& a, UpdateBasicInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBasicInfoResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBasicInfoResp* New() const final {
    return CreateMaybeMessage<UpdateBasicInfoResp>(nullptr);
  }

  UpdateBasicInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBasicInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBasicInfoResp& from);
  void MergeFrom(const UpdateBasicInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBasicInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.UpdateBasicInfoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .protocol.login.v1.CommonHeaderResp header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderResp& header() const;
  ::protocol::login::v1::CommonHeaderResp* release_header();
  ::protocol::login::v1::CommonHeaderResp* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderResp* header);
  private:
  const ::protocol::login::v1::CommonHeaderResp& _internal_header() const;
  ::protocol::login::v1::CommonHeaderResp* _internal_mutable_header();
  public:

  // .protocol.login.v1.BasicInfoItem info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::protocol::login::v1::BasicInfoItem& info() const;
  ::protocol::login::v1::BasicInfoItem* release_info();
  ::protocol::login::v1::BasicInfoItem* mutable_info();
  void set_allocated_info(::protocol::login::v1::BasicInfoItem* info);
  private:
  const ::protocol::login::v1::BasicInfoItem& _internal_info() const;
  ::protocol::login::v1::BasicInfoItem* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.UpdateBasicInfoResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::login::v1::CommonHeaderResp* header_;
  ::protocol::login::v1::BasicInfoItem* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LogoutReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.LogoutReq) */ {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);
  LogoutReq(LogoutReq&& from) noexcept
    : LogoutReq() {
    *this = ::std::move(from);
  }

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutReq& operator=(LogoutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LogoutReq& a, LogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutReq* New() const final {
    return CreateMaybeMessage<LogoutReq>(nullptr);
  }

  LogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.LogoutReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .protocol.login.v1.CommonHeaderReq header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderReq& header() const;
  ::protocol::login::v1::CommonHeaderReq* release_header();
  ::protocol::login::v1::CommonHeaderReq* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderReq* header);
  private:
  const ::protocol::login::v1::CommonHeaderReq& _internal_header() const;
  ::protocol::login::v1::CommonHeaderReq* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.LogoutReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::login::v1::CommonHeaderReq* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LogoutResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.LogoutResp) */ {
 public:
  LogoutResp();
  virtual ~LogoutResp();

  LogoutResp(const LogoutResp& from);
  LogoutResp(LogoutResp&& from) noexcept
    : LogoutResp() {
    *this = ::std::move(from);
  }

  inline LogoutResp& operator=(const LogoutResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResp& operator=(LogoutResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResp* internal_default_instance() {
    return reinterpret_cast<const LogoutResp*>(
               &_LogoutResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LogoutResp& a, LogoutResp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutResp* New() const final {
    return CreateMaybeMessage<LogoutResp>(nullptr);
  }

  LogoutResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutResp& from);
  void MergeFrom(const LogoutResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.LogoutResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .protocol.login.v1.CommonHeaderResp header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderResp& header() const;
  ::protocol::login::v1::CommonHeaderResp* release_header();
  ::protocol::login::v1::CommonHeaderResp* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderResp* header);
  private:
  const ::protocol::login::v1::CommonHeaderResp& _internal_header() const;
  ::protocol::login::v1::CommonHeaderResp* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.LogoutResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::login::v1::CommonHeaderResp* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class AdminReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.AdminReq) */ {
 public:
  AdminReq();
  virtual ~AdminReq();

  AdminReq(const AdminReq& from);
  AdminReq(AdminReq&& from) noexcept
    : AdminReq() {
    *this = ::std::move(from);
  }

  inline AdminReq& operator=(const AdminReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminReq& operator=(AdminReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminReq* internal_default_instance() {
    return reinterpret_cast<const AdminReq*>(
               &_AdminReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AdminReq& a, AdminReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminReq* New() const final {
    return CreateMaybeMessage<AdminReq>(nullptr);
  }

  AdminReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminReq& from);
  void MergeFrom(const AdminReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.AdminReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kHeaderFieldNumber = 1,
  };
  // string cmd = 2;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string f1 = 3;
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // string f2 = 4;
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // .protocol.login.v1.CommonHeaderReq header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderReq& header() const;
  ::protocol::login::v1::CommonHeaderReq* release_header();
  ::protocol::login::v1::CommonHeaderReq* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderReq* header);
  private:
  const ::protocol::login::v1::CommonHeaderReq& _internal_header() const;
  ::protocol::login::v1::CommonHeaderReq* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.AdminReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::protocol::login::v1::CommonHeaderReq* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class AdminResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.login.v1.AdminResp) */ {
 public:
  AdminResp();
  virtual ~AdminResp();

  AdminResp(const AdminResp& from);
  AdminResp(AdminResp&& from) noexcept
    : AdminResp() {
    *this = ::std::move(from);
  }

  inline AdminResp& operator=(const AdminResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminResp& operator=(AdminResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminResp* internal_default_instance() {
    return reinterpret_cast<const AdminResp*>(
               &_AdminResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AdminResp& a, AdminResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminResp* New() const final {
    return CreateMaybeMessage<AdminResp>(nullptr);
  }

  AdminResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminResp& from);
  void MergeFrom(const AdminResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.login.v1.AdminResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // .protocol.login.v1.CommonHeaderResp header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::login::v1::CommonHeaderResp& header() const;
  ::protocol::login::v1::CommonHeaderResp* release_header();
  ::protocol::login::v1::CommonHeaderResp* mutable_header();
  void set_allocated_header(::protocol::login::v1::CommonHeaderResp* header);
  private:
  const ::protocol::login::v1::CommonHeaderResp& _internal_header() const;
  ::protocol::login::v1::CommonHeaderResp* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.login.v1.AdminResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::protocol::login::v1::CommonHeaderResp* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonHeaderReq

// string user_name = 1;
inline void CommonHeaderReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonHeaderReq::user_name() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.CommonHeaderReq.user_name)
  return _internal_user_name();
}
inline void CommonHeaderReq::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.CommonHeaderReq.user_name)
}
inline std::string* CommonHeaderReq::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.CommonHeaderReq.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& CommonHeaderReq::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void CommonHeaderReq::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommonHeaderReq::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.CommonHeaderReq.user_name)
}
inline void CommonHeaderReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.CommonHeaderReq.user_name)
}
inline void CommonHeaderReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.CommonHeaderReq.user_name)
}
inline std::string* CommonHeaderReq::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonHeaderReq::release_user_name() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.CommonHeaderReq.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeaderReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.CommonHeaderReq.user_name)
}

// string token = 2;
inline void CommonHeaderReq::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonHeaderReq::token() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.CommonHeaderReq.token)
  return _internal_token();
}
inline void CommonHeaderReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.CommonHeaderReq.token)
}
inline std::string* CommonHeaderReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.CommonHeaderReq.token)
  return _internal_mutable_token();
}
inline const std::string& CommonHeaderReq::_internal_token() const {
  return token_.GetNoArena();
}
inline void CommonHeaderReq::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommonHeaderReq::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.CommonHeaderReq.token)
}
inline void CommonHeaderReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.CommonHeaderReq.token)
}
inline void CommonHeaderReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.CommonHeaderReq.token)
}
inline std::string* CommonHeaderReq::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonHeaderReq::release_token() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.CommonHeaderReq.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeaderReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.CommonHeaderReq.token)
}

// uint64 stamp = 3;
inline void CommonHeaderReq::clear_stamp() {
  stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonHeaderReq::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonHeaderReq::stamp() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.CommonHeaderReq.stamp)
  return _internal_stamp();
}
inline void CommonHeaderReq::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void CommonHeaderReq::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.CommonHeaderReq.stamp)
}

// -------------------------------------------------------------------

// CommonHeaderResp

// uint32 code = 1;
inline void CommonHeaderResp::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonHeaderResp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonHeaderResp::code() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.CommonHeaderResp.code)
  return _internal_code();
}
inline void CommonHeaderResp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void CommonHeaderResp::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.CommonHeaderResp.code)
}

// string message = 2;
inline void CommonHeaderResp::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonHeaderResp::message() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.CommonHeaderResp.message)
  return _internal_message();
}
inline void CommonHeaderResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.CommonHeaderResp.message)
}
inline std::string* CommonHeaderResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.CommonHeaderResp.message)
  return _internal_mutable_message();
}
inline const std::string& CommonHeaderResp::_internal_message() const {
  return message_.GetNoArena();
}
inline void CommonHeaderResp::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommonHeaderResp::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.CommonHeaderResp.message)
}
inline void CommonHeaderResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.CommonHeaderResp.message)
}
inline void CommonHeaderResp::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.CommonHeaderResp.message)
}
inline std::string* CommonHeaderResp::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonHeaderResp::release_message() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.CommonHeaderResp.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeaderResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.CommonHeaderResp.message)
}

// -------------------------------------------------------------------

// DeviceInfo

// uint32 system_type = 1;
inline void DeviceInfo::clear_system_type() {
  system_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::_internal_system_type() const {
  return system_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::system_type() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.DeviceInfo.system_type)
  return _internal_system_type();
}
inline void DeviceInfo::_internal_set_system_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  system_type_ = value;
}
inline void DeviceInfo::set_system_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_system_type(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.DeviceInfo.system_type)
}

// uint32 device_type = 2;
inline void DeviceInfo::clear_device_type() {
  device_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::_internal_device_type() const {
  return device_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::device_type() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.DeviceInfo.device_type)
  return _internal_device_type();
}
inline void DeviceInfo::_internal_set_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  device_type_ = value;
}
inline void DeviceInfo::set_device_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.DeviceInfo.device_type)
}

// uint32 channel_type = 3;
inline void DeviceInfo::clear_channel_type() {
  channel_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::_internal_channel_type() const {
  return channel_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::channel_type() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.DeviceInfo.channel_type)
  return _internal_channel_type();
}
inline void DeviceInfo::_internal_set_channel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_type_ = value;
}
inline void DeviceInfo::set_channel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.DeviceInfo.channel_type)
}

// string device_name = 4;
inline void DeviceInfo::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::device_name() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.DeviceInfo.device_name)
  return _internal_device_name();
}
inline void DeviceInfo::set_device_name(const std::string& value) {
  _internal_set_device_name(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.DeviceInfo.device_name)
}
inline std::string* DeviceInfo::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.DeviceInfo.device_name)
  return _internal_mutable_device_name();
}
inline const std::string& DeviceInfo::_internal_device_name() const {
  return device_name_.GetNoArena();
}
inline void DeviceInfo::_internal_set_device_name(const std::string& value) {
  
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeviceInfo::set_device_name(std::string&& value) {
  
  device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.DeviceInfo.device_name)
}
inline void DeviceInfo::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.DeviceInfo.device_name)
}
inline void DeviceInfo::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.DeviceInfo.device_name)
}
inline std::string* DeviceInfo::_internal_mutable_device_name() {
  
  return device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_device_name() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.DeviceInfo.device_name)
  
  return device_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.DeviceInfo.device_name)
}

// string device_id = 5;
inline void DeviceInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.DeviceInfo.device_id)
  return _internal_device_id();
}
inline void DeviceInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.DeviceInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void DeviceInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeviceInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.DeviceInfo.device_id)
}
inline void DeviceInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.DeviceInfo.device_id)
}
inline void DeviceInfo::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.DeviceInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.DeviceInfo.device_id)
}

// -------------------------------------------------------------------

// RegisterReq

// .protocol.login.v1.CommonHeaderReq header = 1;
inline bool RegisterReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RegisterReq::has_header() const {
  return _internal_has_header();
}
inline void RegisterReq::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderReq& RegisterReq::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderReq* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderReq*>(
      &::protocol::login::v1::_CommonHeaderReq_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderReq& RegisterReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.RegisterReq.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderReq* RegisterReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.RegisterReq.header)
  
  ::protocol::login::v1::CommonHeaderReq* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderReq* RegisterReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderReq* RegisterReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.RegisterReq.header)
  return _internal_mutable_header();
}
inline void RegisterReq::set_allocated_header(::protocol::login::v1::CommonHeaderReq* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.RegisterReq.header)
}

// string phone_number = 2;
inline void RegisterReq::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterReq::phone_number() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.RegisterReq.phone_number)
  return _internal_phone_number();
}
inline void RegisterReq::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.RegisterReq.phone_number)
}
inline std::string* RegisterReq::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.RegisterReq.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& RegisterReq::_internal_phone_number() const {
  return phone_number_.GetNoArena();
}
inline void RegisterReq::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterReq::set_phone_number(std::string&& value) {
  
  phone_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.RegisterReq.phone_number)
}
inline void RegisterReq::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.RegisterReq.phone_number)
}
inline void RegisterReq::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.RegisterReq.phone_number)
}
inline std::string* RegisterReq::_internal_mutable_phone_number() {
  
  return phone_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterReq::release_phone_number() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.RegisterReq.phone_number)
  
  return phone_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReq::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.RegisterReq.phone_number)
}

// .protocol.login.v1.DeviceInfo device_info = 3;
inline bool RegisterReq::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool RegisterReq::has_device_info() const {
  return _internal_has_device_info();
}
inline void RegisterReq::clear_device_info() {
  if (GetArenaNoVirtual() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
inline const ::protocol::login::v1::DeviceInfo& RegisterReq::_internal_device_info() const {
  const ::protocol::login::v1::DeviceInfo* p = device_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::DeviceInfo*>(
      &::protocol::login::v1::_DeviceInfo_default_instance_);
}
inline const ::protocol::login::v1::DeviceInfo& RegisterReq::device_info() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.RegisterReq.device_info)
  return _internal_device_info();
}
inline ::protocol::login::v1::DeviceInfo* RegisterReq::release_device_info() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.RegisterReq.device_info)
  
  ::protocol::login::v1::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::DeviceInfo* RegisterReq::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  return device_info_;
}
inline ::protocol::login::v1::DeviceInfo* RegisterReq::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.RegisterReq.device_info)
  return _internal_mutable_device_info();
}
inline void RegisterReq::set_allocated_device_info(::protocol::login::v1::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_info_;
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.RegisterReq.device_info)
}

// string sign = 4;
inline void RegisterReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterReq::sign() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.RegisterReq.sign)
  return _internal_sign();
}
inline void RegisterReq::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.RegisterReq.sign)
}
inline std::string* RegisterReq::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.RegisterReq.sign)
  return _internal_mutable_sign();
}
inline const std::string& RegisterReq::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void RegisterReq::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterReq::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.RegisterReq.sign)
}
inline void RegisterReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.RegisterReq.sign)
}
inline void RegisterReq::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.RegisterReq.sign)
}
inline std::string* RegisterReq::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterReq::release_sign() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.RegisterReq.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.RegisterReq.sign)
}

// -------------------------------------------------------------------

// RegisterResp

// .protocol.login.v1.CommonHeaderResp header = 1;
inline bool RegisterResp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RegisterResp::has_header() const {
  return _internal_has_header();
}
inline void RegisterResp::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderResp& RegisterResp::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderResp* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderResp*>(
      &::protocol::login::v1::_CommonHeaderResp_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderResp& RegisterResp::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.RegisterResp.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderResp* RegisterResp::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.RegisterResp.header)
  
  ::protocol::login::v1::CommonHeaderResp* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderResp* RegisterResp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderResp* RegisterResp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.RegisterResp.header)
  return _internal_mutable_header();
}
inline void RegisterResp::set_allocated_header(::protocol::login::v1::CommonHeaderResp* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.RegisterResp.header)
}

// -------------------------------------------------------------------

// LoginReq

// .protocol.login.v1.CommonHeaderReq header = 1;
inline bool LoginReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LoginReq::has_header() const {
  return _internal_has_header();
}
inline void LoginReq::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderReq& LoginReq::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderReq* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderReq*>(
      &::protocol::login::v1::_CommonHeaderReq_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderReq& LoginReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginReq.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderReq* LoginReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LoginReq.header)
  
  ::protocol::login::v1::CommonHeaderReq* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderReq* LoginReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderReq* LoginReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginReq.header)
  return _internal_mutable_header();
}
inline void LoginReq::set_allocated_header(::protocol::login::v1::CommonHeaderReq* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LoginReq.header)
}

// uint32 login_type = 2;
inline void LoginReq::clear_login_type() {
  login_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReq::_internal_login_type() const {
  return login_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReq::login_type() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginReq.login_type)
  return _internal_login_type();
}
inline void LoginReq::_internal_set_login_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_type_ = value;
}
inline void LoginReq::set_login_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_type(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.LoginReq.login_type)
}

// .protocol.login.v1.DeviceInfo device_info = 3;
inline bool LoginReq::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool LoginReq::has_device_info() const {
  return _internal_has_device_info();
}
inline void LoginReq::clear_device_info() {
  if (GetArenaNoVirtual() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
inline const ::protocol::login::v1::DeviceInfo& LoginReq::_internal_device_info() const {
  const ::protocol::login::v1::DeviceInfo* p = device_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::DeviceInfo*>(
      &::protocol::login::v1::_DeviceInfo_default_instance_);
}
inline const ::protocol::login::v1::DeviceInfo& LoginReq::device_info() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginReq.device_info)
  return _internal_device_info();
}
inline ::protocol::login::v1::DeviceInfo* LoginReq::release_device_info() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LoginReq.device_info)
  
  ::protocol::login::v1::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::DeviceInfo* LoginReq::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  return device_info_;
}
inline ::protocol::login::v1::DeviceInfo* LoginReq::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginReq.device_info)
  return _internal_mutable_device_info();
}
inline void LoginReq::set_allocated_device_info(::protocol::login::v1::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_info_;
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LoginReq.device_info)
}

// string sign = 4;
inline void LoginReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::sign() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginReq.sign)
  return _internal_sign();
}
inline void LoginReq::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.LoginReq.sign)
}
inline std::string* LoginReq::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginReq.sign)
  return _internal_mutable_sign();
}
inline const std::string& LoginReq::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void LoginReq::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.LoginReq.sign)
}
inline void LoginReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.LoginReq.sign)
}
inline void LoginReq::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.LoginReq.sign)
}
inline std::string* LoginReq::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_sign() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LoginReq.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LoginReq.sign)
}

// -------------------------------------------------------------------

// LoginResp_MessageItem

// uint32 msg_type = 1;
inline void LoginResp_MessageItem::clear_msg_type() {
  msg_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResp_MessageItem::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginResp_MessageItem::msg_type() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginResp.MessageItem.msg_type)
  return _internal_msg_type();
}
inline void LoginResp_MessageItem::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_type_ = value;
}
inline void LoginResp_MessageItem::set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.LoginResp.MessageItem.msg_type)
}

// string content = 2;
inline void LoginResp_MessageItem::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResp_MessageItem::content() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginResp.MessageItem.content)
  return _internal_content();
}
inline void LoginResp_MessageItem::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.LoginResp.MessageItem.content)
}
inline std::string* LoginResp_MessageItem::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginResp.MessageItem.content)
  return _internal_mutable_content();
}
inline const std::string& LoginResp_MessageItem::_internal_content() const {
  return content_.GetNoArena();
}
inline void LoginResp_MessageItem::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginResp_MessageItem::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.LoginResp.MessageItem.content)
}
inline void LoginResp_MessageItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.LoginResp.MessageItem.content)
}
inline void LoginResp_MessageItem::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.LoginResp.MessageItem.content)
}
inline std::string* LoginResp_MessageItem::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResp_MessageItem::release_content() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LoginResp.MessageItem.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp_MessageItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LoginResp.MessageItem.content)
}

// -------------------------------------------------------------------

// LoginResp

// .protocol.login.v1.CommonHeaderResp header = 1;
inline bool LoginResp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LoginResp::has_header() const {
  return _internal_has_header();
}
inline void LoginResp::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderResp& LoginResp::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderResp* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderResp*>(
      &::protocol::login::v1::_CommonHeaderResp_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderResp& LoginResp::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginResp.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderResp* LoginResp::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LoginResp.header)
  
  ::protocol::login::v1::CommonHeaderResp* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderResp* LoginResp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderResp* LoginResp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginResp.header)
  return _internal_mutable_header();
}
inline void LoginResp::set_allocated_header(::protocol::login::v1::CommonHeaderResp* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LoginResp.header)
}

// repeated .protocol.login.v1.LoginResp.MessageItem messages = 2;
inline int LoginResp::_internal_messages_size() const {
  return messages_.size();
}
inline int LoginResp::messages_size() const {
  return _internal_messages_size();
}
inline void LoginResp::clear_messages() {
  messages_.Clear();
}
inline ::protocol::login::v1::LoginResp_MessageItem* LoginResp::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LoginResp.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::login::v1::LoginResp_MessageItem >*
LoginResp::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:protocol.login.v1.LoginResp.messages)
  return &messages_;
}
inline const ::protocol::login::v1::LoginResp_MessageItem& LoginResp::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::protocol::login::v1::LoginResp_MessageItem& LoginResp::messages(int index) const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LoginResp.messages)
  return _internal_messages(index);
}
inline ::protocol::login::v1::LoginResp_MessageItem* LoginResp::_internal_add_messages() {
  return messages_.Add();
}
inline ::protocol::login::v1::LoginResp_MessageItem* LoginResp::add_messages() {
  // @@protoc_insertion_point(field_add:protocol.login.v1.LoginResp.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::login::v1::LoginResp_MessageItem >&
LoginResp::messages() const {
  // @@protoc_insertion_point(field_list:protocol.login.v1.LoginResp.messages)
  return messages_;
}

// -------------------------------------------------------------------

// BasicInfoItem

// string user_name = 1;
inline void BasicInfoItem::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicInfoItem::user_name() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.BasicInfoItem.user_name)
  return _internal_user_name();
}
inline void BasicInfoItem::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.BasicInfoItem.user_name)
}
inline std::string* BasicInfoItem::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.BasicInfoItem.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& BasicInfoItem::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void BasicInfoItem::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicInfoItem::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.BasicInfoItem.user_name)
}
inline void BasicInfoItem::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.BasicInfoItem.user_name)
}
inline void BasicInfoItem::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.BasicInfoItem.user_name)
}
inline std::string* BasicInfoItem::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicInfoItem::release_user_name() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.BasicInfoItem.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicInfoItem::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.BasicInfoItem.user_name)
}

// string user_nick = 2;
inline void BasicInfoItem::clear_user_nick() {
  user_nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicInfoItem::user_nick() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.BasicInfoItem.user_nick)
  return _internal_user_nick();
}
inline void BasicInfoItem::set_user_nick(const std::string& value) {
  _internal_set_user_nick(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.BasicInfoItem.user_nick)
}
inline std::string* BasicInfoItem::mutable_user_nick() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.BasicInfoItem.user_nick)
  return _internal_mutable_user_nick();
}
inline const std::string& BasicInfoItem::_internal_user_nick() const {
  return user_nick_.GetNoArena();
}
inline void BasicInfoItem::_internal_set_user_nick(const std::string& value) {
  
  user_nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicInfoItem::set_user_nick(std::string&& value) {
  
  user_nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.BasicInfoItem.user_nick)
}
inline void BasicInfoItem::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.BasicInfoItem.user_nick)
}
inline void BasicInfoItem::set_user_nick(const char* value, size_t size) {
  
  user_nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.BasicInfoItem.user_nick)
}
inline std::string* BasicInfoItem::_internal_mutable_user_nick() {
  
  return user_nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicInfoItem::release_user_nick() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.BasicInfoItem.user_nick)
  
  return user_nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicInfoItem::set_allocated_user_nick(std::string* user_nick) {
  if (user_nick != nullptr) {
    
  } else {
    
  }
  user_nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_nick);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.BasicInfoItem.user_nick)
}

// uint32 gender = 3;
inline void BasicInfoItem::clear_gender() {
  gender_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicInfoItem::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicInfoItem::gender() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.BasicInfoItem.gender)
  return _internal_gender();
}
inline void BasicInfoItem::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gender_ = value;
}
inline void BasicInfoItem::set_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.BasicInfoItem.gender)
}

// string avatar = 4;
inline void BasicInfoItem::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicInfoItem::avatar() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.BasicInfoItem.avatar)
  return _internal_avatar();
}
inline void BasicInfoItem::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.BasicInfoItem.avatar)
}
inline std::string* BasicInfoItem::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.BasicInfoItem.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& BasicInfoItem::_internal_avatar() const {
  return avatar_.GetNoArena();
}
inline void BasicInfoItem::_internal_set_avatar(const std::string& value) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicInfoItem::set_avatar(std::string&& value) {
  
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.BasicInfoItem.avatar)
}
inline void BasicInfoItem::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.BasicInfoItem.avatar)
}
inline void BasicInfoItem::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.BasicInfoItem.avatar)
}
inline std::string* BasicInfoItem::_internal_mutable_avatar() {
  
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicInfoItem::release_avatar() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.BasicInfoItem.avatar)
  
  return avatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicInfoItem::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.BasicInfoItem.avatar)
}

// string signature = 5;
inline void BasicInfoItem::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicInfoItem::signature() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.BasicInfoItem.signature)
  return _internal_signature();
}
inline void BasicInfoItem::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.BasicInfoItem.signature)
}
inline std::string* BasicInfoItem::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.BasicInfoItem.signature)
  return _internal_mutable_signature();
}
inline const std::string& BasicInfoItem::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void BasicInfoItem::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicInfoItem::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.BasicInfoItem.signature)
}
inline void BasicInfoItem::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.BasicInfoItem.signature)
}
inline void BasicInfoItem::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.BasicInfoItem.signature)
}
inline std::string* BasicInfoItem::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicInfoItem::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.BasicInfoItem.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicInfoItem::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.BasicInfoItem.signature)
}

// -------------------------------------------------------------------

// UpdateBasicInfoReq

// .protocol.login.v1.CommonHeaderReq header = 1;
inline bool UpdateBasicInfoReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdateBasicInfoReq::has_header() const {
  return _internal_has_header();
}
inline void UpdateBasicInfoReq::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderReq& UpdateBasicInfoReq::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderReq* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderReq*>(
      &::protocol::login::v1::_CommonHeaderReq_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderReq& UpdateBasicInfoReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.UpdateBasicInfoReq.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderReq* UpdateBasicInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.UpdateBasicInfoReq.header)
  
  ::protocol::login::v1::CommonHeaderReq* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderReq* UpdateBasicInfoReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderReq* UpdateBasicInfoReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.UpdateBasicInfoReq.header)
  return _internal_mutable_header();
}
inline void UpdateBasicInfoReq::set_allocated_header(::protocol::login::v1::CommonHeaderReq* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.UpdateBasicInfoReq.header)
}

// .protocol.login.v1.BasicInfoItem info = 2;
inline bool UpdateBasicInfoReq::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateBasicInfoReq::has_info() const {
  return _internal_has_info();
}
inline void UpdateBasicInfoReq::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::protocol::login::v1::BasicInfoItem& UpdateBasicInfoReq::_internal_info() const {
  const ::protocol::login::v1::BasicInfoItem* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::BasicInfoItem*>(
      &::protocol::login::v1::_BasicInfoItem_default_instance_);
}
inline const ::protocol::login::v1::BasicInfoItem& UpdateBasicInfoReq::info() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.UpdateBasicInfoReq.info)
  return _internal_info();
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoReq::release_info() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.UpdateBasicInfoReq.info)
  
  ::protocol::login::v1::BasicInfoItem* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoReq::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::BasicInfoItem>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoReq::mutable_info() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.UpdateBasicInfoReq.info)
  return _internal_mutable_info();
}
inline void UpdateBasicInfoReq::set_allocated_info(::protocol::login::v1::BasicInfoItem* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.UpdateBasicInfoReq.info)
}

// -------------------------------------------------------------------

// UpdateBasicInfoResp

// .protocol.login.v1.CommonHeaderResp header = 1;
inline bool UpdateBasicInfoResp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdateBasicInfoResp::has_header() const {
  return _internal_has_header();
}
inline void UpdateBasicInfoResp::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderResp& UpdateBasicInfoResp::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderResp* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderResp*>(
      &::protocol::login::v1::_CommonHeaderResp_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderResp& UpdateBasicInfoResp::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.UpdateBasicInfoResp.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderResp* UpdateBasicInfoResp::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.UpdateBasicInfoResp.header)
  
  ::protocol::login::v1::CommonHeaderResp* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderResp* UpdateBasicInfoResp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderResp* UpdateBasicInfoResp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.UpdateBasicInfoResp.header)
  return _internal_mutable_header();
}
inline void UpdateBasicInfoResp::set_allocated_header(::protocol::login::v1::CommonHeaderResp* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.UpdateBasicInfoResp.header)
}

// .protocol.login.v1.BasicInfoItem info = 2;
inline bool UpdateBasicInfoResp::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateBasicInfoResp::has_info() const {
  return _internal_has_info();
}
inline void UpdateBasicInfoResp::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::protocol::login::v1::BasicInfoItem& UpdateBasicInfoResp::_internal_info() const {
  const ::protocol::login::v1::BasicInfoItem* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::BasicInfoItem*>(
      &::protocol::login::v1::_BasicInfoItem_default_instance_);
}
inline const ::protocol::login::v1::BasicInfoItem& UpdateBasicInfoResp::info() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.UpdateBasicInfoResp.info)
  return _internal_info();
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoResp::release_info() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.UpdateBasicInfoResp.info)
  
  ::protocol::login::v1::BasicInfoItem* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoResp::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::BasicInfoItem>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::protocol::login::v1::BasicInfoItem* UpdateBasicInfoResp::mutable_info() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.UpdateBasicInfoResp.info)
  return _internal_mutable_info();
}
inline void UpdateBasicInfoResp::set_allocated_info(::protocol::login::v1::BasicInfoItem* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.UpdateBasicInfoResp.info)
}

// -------------------------------------------------------------------

// LogoutReq

// .protocol.login.v1.CommonHeaderReq header = 1;
inline bool LogoutReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LogoutReq::has_header() const {
  return _internal_has_header();
}
inline void LogoutReq::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderReq& LogoutReq::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderReq* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderReq*>(
      &::protocol::login::v1::_CommonHeaderReq_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderReq& LogoutReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LogoutReq.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderReq* LogoutReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LogoutReq.header)
  
  ::protocol::login::v1::CommonHeaderReq* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderReq* LogoutReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderReq* LogoutReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LogoutReq.header)
  return _internal_mutable_header();
}
inline void LogoutReq::set_allocated_header(::protocol::login::v1::CommonHeaderReq* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LogoutReq.header)
}

// -------------------------------------------------------------------

// LogoutResp

// .protocol.login.v1.CommonHeaderResp header = 1;
inline bool LogoutResp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LogoutResp::has_header() const {
  return _internal_has_header();
}
inline void LogoutResp::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderResp& LogoutResp::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderResp* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderResp*>(
      &::protocol::login::v1::_CommonHeaderResp_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderResp& LogoutResp::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.LogoutResp.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderResp* LogoutResp::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.LogoutResp.header)
  
  ::protocol::login::v1::CommonHeaderResp* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderResp* LogoutResp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderResp* LogoutResp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.LogoutResp.header)
  return _internal_mutable_header();
}
inline void LogoutResp::set_allocated_header(::protocol::login::v1::CommonHeaderResp* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.LogoutResp.header)
}

// -------------------------------------------------------------------

// AdminReq

// .protocol.login.v1.CommonHeaderReq header = 1;
inline bool AdminReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AdminReq::has_header() const {
  return _internal_has_header();
}
inline void AdminReq::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderReq& AdminReq::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderReq* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderReq*>(
      &::protocol::login::v1::_CommonHeaderReq_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderReq& AdminReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminReq.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderReq* AdminReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminReq.header)
  
  ::protocol::login::v1::CommonHeaderReq* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderReq* AdminReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderReq>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderReq* AdminReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminReq.header)
  return _internal_mutable_header();
}
inline void AdminReq::set_allocated_header(::protocol::login::v1::CommonHeaderReq* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminReq.header)
}

// string cmd = 2;
inline void AdminReq::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdminReq::cmd() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminReq.cmd)
  return _internal_cmd();
}
inline void AdminReq::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.AdminReq.cmd)
}
inline std::string* AdminReq::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminReq.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& AdminReq::_internal_cmd() const {
  return cmd_.GetNoArena();
}
inline void AdminReq::_internal_set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdminReq::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.AdminReq.cmd)
}
inline void AdminReq::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.AdminReq.cmd)
}
inline void AdminReq::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.AdminReq.cmd)
}
inline std::string* AdminReq::_internal_mutable_cmd() {
  
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdminReq::release_cmd() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminReq.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdminReq::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminReq.cmd)
}

// string f1 = 3;
inline void AdminReq::clear_f1() {
  f1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdminReq::f1() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminReq.f1)
  return _internal_f1();
}
inline void AdminReq::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.AdminReq.f1)
}
inline std::string* AdminReq::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminReq.f1)
  return _internal_mutable_f1();
}
inline const std::string& AdminReq::_internal_f1() const {
  return f1_.GetNoArena();
}
inline void AdminReq::_internal_set_f1(const std::string& value) {
  
  f1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdminReq::set_f1(std::string&& value) {
  
  f1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.AdminReq.f1)
}
inline void AdminReq::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.AdminReq.f1)
}
inline void AdminReq::set_f1(const char* value, size_t size) {
  
  f1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.AdminReq.f1)
}
inline std::string* AdminReq::_internal_mutable_f1() {
  
  return f1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdminReq::release_f1() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminReq.f1)
  
  return f1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdminReq::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    
  } else {
    
  }
  f1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminReq.f1)
}

// string f2 = 4;
inline void AdminReq::clear_f2() {
  f2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdminReq::f2() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminReq.f2)
  return _internal_f2();
}
inline void AdminReq::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.AdminReq.f2)
}
inline std::string* AdminReq::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminReq.f2)
  return _internal_mutable_f2();
}
inline const std::string& AdminReq::_internal_f2() const {
  return f2_.GetNoArena();
}
inline void AdminReq::_internal_set_f2(const std::string& value) {
  
  f2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdminReq::set_f2(std::string&& value) {
  
  f2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.AdminReq.f2)
}
inline void AdminReq::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.AdminReq.f2)
}
inline void AdminReq::set_f2(const char* value, size_t size) {
  
  f2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.AdminReq.f2)
}
inline std::string* AdminReq::_internal_mutable_f2() {
  
  return f2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdminReq::release_f2() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminReq.f2)
  
  return f2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdminReq::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    
  } else {
    
  }
  f2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminReq.f2)
}

// -------------------------------------------------------------------

// AdminResp

// .protocol.login.v1.CommonHeaderResp header = 1;
inline bool AdminResp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AdminResp::has_header() const {
  return _internal_has_header();
}
inline void AdminResp::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::login::v1::CommonHeaderResp& AdminResp::_internal_header() const {
  const ::protocol::login::v1::CommonHeaderResp* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::login::v1::CommonHeaderResp*>(
      &::protocol::login::v1::_CommonHeaderResp_default_instance_);
}
inline const ::protocol::login::v1::CommonHeaderResp& AdminResp::header() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminResp.header)
  return _internal_header();
}
inline ::protocol::login::v1::CommonHeaderResp* AdminResp::release_header() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminResp.header)
  
  ::protocol::login::v1::CommonHeaderResp* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::login::v1::CommonHeaderResp* AdminResp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::login::v1::CommonHeaderResp>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::protocol::login::v1::CommonHeaderResp* AdminResp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminResp.header)
  return _internal_mutable_header();
}
inline void AdminResp::set_allocated_header(::protocol::login::v1::CommonHeaderResp* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminResp.header)
}

// string result = 2;
inline void AdminResp::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdminResp::result() const {
  // @@protoc_insertion_point(field_get:protocol.login.v1.AdminResp.result)
  return _internal_result();
}
inline void AdminResp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protocol.login.v1.AdminResp.result)
}
inline std::string* AdminResp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:protocol.login.v1.AdminResp.result)
  return _internal_mutable_result();
}
inline const std::string& AdminResp::_internal_result() const {
  return result_.GetNoArena();
}
inline void AdminResp::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdminResp::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.login.v1.AdminResp.result)
}
inline void AdminResp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.login.v1.AdminResp.result)
}
inline void AdminResp::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.login.v1.AdminResp.result)
}
inline std::string* AdminResp::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdminResp::release_result() {
  // @@protoc_insertion_point(field_release:protocol.login.v1.AdminResp.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdminResp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:protocol.login.v1.AdminResp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace login
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
