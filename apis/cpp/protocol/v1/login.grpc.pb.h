// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: login.proto
#ifndef GRPC_login_2eproto__INCLUDED
#define GRPC_login_2eproto__INCLUDED

#include "login.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace protocol {
namespace login {
namespace v1 {

// Login API 
class LoginAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.login.v1.LoginAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::protocol::login::v1::RegisterResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>> AsyncRegister(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::protocol::login::v1::LoginResp>> Login(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::protocol::login::v1::LoginResp>>(LoginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>> AsyncLogin(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>>(AsyncLoginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::protocol::login::v1::UpdateBasicInfoResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>> AsyncUpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>>(AsyncUpdateBasicInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>> PrepareAsyncUpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>>(PrepareAsyncUpdateBasicInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::protocol::login::v1::LogoutResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>> AsyncLogout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::protocol::login::v1::AdminResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>> AsyncAdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>>(AsyncAdminOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>> PrepareAsyncAdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>>(PrepareAsyncAdminOpRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::ClientReadReactor< ::protocol::login::v1::LoginResp>* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::experimental::ClientReadReactor< ::protocol::login::v1::LoginResp>* reactor) = 0;
      #endif
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::RegisterResp>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::protocol::login::v1::LoginResp>* LoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>* AsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protocol::login::v1::LoginResp>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>* AsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::UpdateBasicInfoResp>* PrepareAsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::LogoutResp>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>* AsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::login::v1::AdminResp>* PrepareAsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::protocol::login::v1::RegisterResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>> AsyncRegister(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::protocol::login::v1::LoginResp>> Login(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::protocol::login::v1::LoginResp>>(LoginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>> AsyncLogin(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>>(AsyncLoginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::protocol::login::v1::UpdateBasicInfoResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>> AsyncUpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>>(AsyncUpdateBasicInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>> PrepareAsyncUpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>>(PrepareAsyncUpdateBasicInfoRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::protocol::login::v1::LogoutResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>> AsyncLogout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::protocol::login::v1::AdminResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>> AsyncAdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>>(AsyncAdminOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>> PrepareAsyncAdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>>(PrepareAsyncAdminOpRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::ClientReadReactor< ::protocol::login::v1::LoginResp>* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::experimental::ClientReadReactor< ::protocol::login::v1::LoginResp>* reactor) override;
      #endif
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)>) override;
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)>) override;
      void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::protocol::login::v1::LoginResp>* LoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request) override;
    ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>* AsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>* AsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>* PrepareAsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>* AsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>* PrepareAsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBasicInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_AdminOp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::protocol::login::v1::LoginReq* request, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* writer);
    virtual ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response);
    virtual ::grpc::Status AdminOp(::grpc::ServerContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::protocol::login::v1::RegisterReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::login::v1::RegisterResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::ServerAsyncWriter< ::protocol::login::v1::LoginResp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateBasicInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBasicInfo(::grpc::ServerContext* context, ::protocol::login::v1::UpdateBasicInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::login::v1::UpdateBasicInfoResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::protocol::login::v1::LogoutReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::login::v1::LogoutResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AdminOp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdminOp(::grpc::ServerContext* context, ::protocol::login::v1::AdminReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::login::v1::AdminResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_UpdateBasicInfo<WithAsyncMethod_Logout<WithAsyncMethod_AdminOp<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::RegisterReq, ::protocol::login::v1::RegisterResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::protocol::login::v1::RegisterReq, ::protocol::login::v1::RegisterResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::RegisterReq, ::protocol::login::v1::RegisterResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::protocol::login::v1::LoginReq, ::protocol::login::v1::LoginResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::login::v1::LoginReq* request) { return this->Login(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::protocol::login::v1::LoginResp>* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::protocol::login::v1::LoginResp>* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateBasicInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::UpdateBasicInfoReq, ::protocol::login::v1::UpdateBasicInfoResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response) { return this->UpdateBasicInfo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateBasicInfo(
        ::grpc::experimental::MessageAllocator< ::protocol::login::v1::UpdateBasicInfoReq, ::protocol::login::v1::UpdateBasicInfoResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::UpdateBasicInfoReq, ::protocol::login::v1::UpdateBasicInfoResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBasicInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBasicInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::LogoutReq, ::protocol::login::v1::LogoutResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::protocol::login::v1::LogoutReq, ::protocol::login::v1::LogoutResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::LogoutReq, ::protocol::login::v1::LogoutResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AdminOp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::AdminReq, ::protocol::login::v1::AdminResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response) { return this->AdminOp(context, request, response); }));}
    void SetMessageAllocatorFor_AdminOp(
        ::grpc::experimental::MessageAllocator< ::protocol::login::v1::AdminReq, ::protocol::login::v1::AdminResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::login::v1::AdminReq, ::protocol::login::v1::AdminResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AdminOp(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AdminOp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Register<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_UpdateBasicInfo<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_AdminOp<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Register<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_UpdateBasicInfo<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_AdminOp<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateBasicInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AdminOp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateBasicInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBasicInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AdminOp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdminOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Login(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateBasicInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateBasicInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBasicInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBasicInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AdminOp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AdminOp(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AdminOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AdminOp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::login::v1::RegisterReq, ::protocol::login::v1::RegisterResp>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::RegisterReq* /*request*/, ::protocol::login::v1::RegisterResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::login::v1::RegisterReq,::protocol::login::v1::RegisterResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBasicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateBasicInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::login::v1::UpdateBasicInfoReq, ::protocol::login::v1::UpdateBasicInfoResp>(std::bind(&WithStreamedUnaryMethod_UpdateBasicInfo<BaseClass>::StreamedUpdateBasicInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateBasicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBasicInfo(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::UpdateBasicInfoReq* /*request*/, ::protocol::login::v1::UpdateBasicInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBasicInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::login::v1::UpdateBasicInfoReq,::protocol::login::v1::UpdateBasicInfoResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::login::v1::LogoutReq, ::protocol::login::v1::LogoutResp>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LogoutReq* /*request*/, ::protocol::login::v1::LogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::login::v1::LogoutReq,::protocol::login::v1::LogoutResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AdminOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AdminOp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::protocol::login::v1::AdminReq, ::protocol::login::v1::AdminResp>(std::bind(&WithStreamedUnaryMethod_AdminOp<BaseClass>::StreamedAdminOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AdminOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AdminOp(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::AdminReq* /*request*/, ::protocol::login::v1::AdminResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdminOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::login::v1::AdminReq,::protocol::login::v1::AdminResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_UpdateBasicInfo<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_AdminOp<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::protocol::login::v1::LoginReq, ::protocol::login::v1::LoginResp>(std::bind(&WithSplitStreamingMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::protocol::login::v1::LoginReq* /*request*/, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::protocol::login::v1::LoginReq,::protocol::login::v1::LoginResp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Login<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithSplitStreamingMethod_Login<WithStreamedUnaryMethod_UpdateBasicInfo<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_AdminOp<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace login
}  // namespace protocol


#endif  // GRPC_login_2eproto__INCLUDED
