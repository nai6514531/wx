// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: login.proto

#include "login.pb.h"
#include "login.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protocol {
namespace login {
namespace v1 {

static const char* LoginAPI_method_names[] = {
  "/protocol.login.v1.LoginAPI/Register",
  "/protocol.login.v1.LoginAPI/Login",
  "/protocol.login.v1.LoginAPI/UpdateBasicInfo",
  "/protocol.login.v1.LoginAPI/Logout",
  "/protocol.login.v1.LoginAPI/AdminOp",
};

std::unique_ptr< LoginAPI::Stub> LoginAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoginAPI::Stub> stub(new LoginAPI::Stub(channel));
  return stub;
}

LoginAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(LoginAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(LoginAPI_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UpdateBasicInfo_(LoginAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(LoginAPI_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdminOp_(LoginAPI_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoginAPI::Stub::Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::protocol::login::v1::RegisterResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void LoginAPI::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

void LoginAPI::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::RegisterResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>* LoginAPI::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::RegisterResp>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::RegisterResp>* LoginAPI::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::protocol::login::v1::RegisterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::RegisterResp>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::ClientReader< ::protocol::login::v1::LoginResp>* LoginAPI::Stub::LoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::protocol::login::v1::LoginResp>::Create(channel_.get(), rpcmethod_Login_, context, request);
}

void LoginAPI::Stub::experimental_async::Login(::grpc::ClientContext* context, ::protocol::login::v1::LoginReq* request, ::grpc::experimental::ClientReadReactor< ::protocol::login::v1::LoginResp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::protocol::login::v1::LoginResp>::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>* LoginAPI::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::protocol::login::v1::LoginResp>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::protocol::login::v1::LoginResp>* LoginAPI::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::protocol::login::v1::LoginResp>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false, nullptr);
}

::grpc::Status LoginAPI::Stub::UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::protocol::login::v1::UpdateBasicInfoResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateBasicInfo_, context, request, response);
}

void LoginAPI::Stub::experimental_async::UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBasicInfo_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBasicInfo_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::UpdateBasicInfo(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBasicInfo_, context, request, response, reactor);
}

void LoginAPI::Stub::experimental_async::UpdateBasicInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::UpdateBasicInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBasicInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>* LoginAPI::Stub::AsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::UpdateBasicInfoResp>::Create(channel_.get(), cq, rpcmethod_UpdateBasicInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::UpdateBasicInfoResp>* LoginAPI::Stub::PrepareAsyncUpdateBasicInfoRaw(::grpc::ClientContext* context, const ::protocol::login::v1::UpdateBasicInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::UpdateBasicInfoResp>::Create(channel_.get(), cq, rpcmethod_UpdateBasicInfo_, context, request, false);
}

::grpc::Status LoginAPI::Stub::Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::protocol::login::v1::LogoutResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void LoginAPI::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void LoginAPI::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::LogoutResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>* LoginAPI::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::LogoutResp>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::LogoutResp>* LoginAPI::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::protocol::login::v1::LogoutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::LogoutResp>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status LoginAPI::Stub::AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::protocol::login::v1::AdminResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AdminOp_, context, request, response);
}

void LoginAPI::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, std::move(f));
}

void LoginAPI::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, reactor);
}

void LoginAPI::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::login::v1::AdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>* LoginAPI::Stub::AsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::AdminResp>::Create(channel_.get(), cq, rpcmethod_AdminOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::login::v1::AdminResp>* LoginAPI::Stub::PrepareAsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::login::v1::AdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::login::v1::AdminResp>::Create(channel_.get(), cq, rpcmethod_AdminOp_, context, request, false);
}

LoginAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginAPI::Service, ::protocol::login::v1::RegisterReq, ::protocol::login::v1::RegisterResp>(
          std::mem_fn(&LoginAPI::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginAPI_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoginAPI::Service, ::protocol::login::v1::LoginReq, ::protocol::login::v1::LoginResp>(
          std::mem_fn(&LoginAPI::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginAPI::Service, ::protocol::login::v1::UpdateBasicInfoReq, ::protocol::login::v1::UpdateBasicInfoResp>(
          std::mem_fn(&LoginAPI::Service::UpdateBasicInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginAPI::Service, ::protocol::login::v1::LogoutReq, ::protocol::login::v1::LogoutResp>(
          std::mem_fn(&LoginAPI::Service::Logout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginAPI::Service, ::protocol::login::v1::AdminReq, ::protocol::login::v1::AdminResp>(
          std::mem_fn(&LoginAPI::Service::AdminOp), this)));
}

LoginAPI::Service::~Service() {
}

::grpc::Status LoginAPI::Service::Register(::grpc::ServerContext* context, const ::protocol::login::v1::RegisterReq* request, ::protocol::login::v1::RegisterResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoginAPI::Service::Login(::grpc::ServerContext* context, const ::protocol::login::v1::LoginReq* request, ::grpc::ServerWriter< ::protocol::login::v1::LoginResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoginAPI::Service::UpdateBasicInfo(::grpc::ServerContext* context, const ::protocol::login::v1::UpdateBasicInfoReq* request, ::protocol::login::v1::UpdateBasicInfoResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoginAPI::Service::Logout(::grpc::ServerContext* context, const ::protocol::login::v1::LogoutReq* request, ::protocol::login::v1::LogoutResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoginAPI::Service::AdminOp(::grpc::ServerContext* context, const ::protocol::login::v1::AdminReq* request, ::protocol::login::v1::AdminResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protocol
}  // namespace login
}  // namespace v1

